{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","content","onClick","services_notes","axios","get","newObject","post","id","put","concat","App","props","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","useEffect","noteService","then","response","data","notesToShow","filter","map","components_Note","key","find","n","changedNote","objectSpread","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","value","onChange","console","log","target","type","ReactDOM","render","src_App","document","getElementById"],"mappings":"wLAceA,EAZF,SAAAC,GAA8B,IAA5BC,EAA4BD,EAA5BC,KAAMC,EAAsBF,EAAtBE,iBAEXC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACIC,EAAAC,EAAAC,cAAA,WACKN,EAAKO,QACNH,EAAAC,EAAAC,cAAA,UAAQE,QAASP,GAAmBC,qBCGjCO,EANA,kBAAMC,IAAMC,IAFX,WAQDF,EAJA,SAAAG,GAAS,OAAIF,IAAMG,KAJlB,SAIgCD,IAIjCH,EAFA,SAACK,EAAIF,GAAL,OAAmBF,IAAMK,IAAN,GAAAC,OANlB,SAMkB,KAAAA,OAAwBF,GAAMF,IC0FjDK,EA9FH,SAACC,GAAU,IAAAC,EAEOC,mBAAS,IAFhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEZK,EAFYH,EAAA,GAELI,EAFKJ,EAAA,GAAAK,EAGWN,mBAAS,IAHpBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGZE,EAHYD,EAAA,GAGHE,EAHGF,EAAA,GAAAG,EAIWV,oBAAS,GAJpBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAIZE,EAJYD,EAAA,GAIHE,EAJGF,EAAA,GAiBnBG,oBAXa,WAKTC,IACKC,KAAM,SAAAC,GAEHZ,EAASY,EAASC,SAGd,IAKhB,IAcMC,EAAcP,EAAUR,EAAQA,EAAMgB,OAAO,SAAAxC,GAAI,OAAIA,EAAKG,YAmChE,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAMyB,GAAYD,KAAnC,QACUA,EAAU,YAAc,QAGtC5B,EAAAC,EAAAC,cAAA,UA1CUiC,EAAYE,IAAI,SAAAzC,GAAI,OAClCI,EAAAC,EAAAC,cAACoC,EAAD,CACIC,IAAK3C,EAAKc,GACVd,KAAMA,EACNC,iBAAoB,kBAnBD,SAAAa,GAIvB,IAAMd,EAAOwB,EAAMoB,KAAK,SAAAC,GAAC,OAAEA,EAAE/B,KAAOA,IAC9BgC,EAAWxB,OAAAyB,EAAA,EAAAzB,CAAA,GAAOtB,EAAP,CAAaG,WAAYH,EAAKG,YAG/CgC,EAAmBrB,EAAGgC,GACrBV,KAAK,SAAAC,GACFZ,EAASD,EAAMiB,IAAI,SAAAzC,GAAI,OAAIA,EAAKc,KAAOA,EAAKd,EAAOqC,EAASC,UASpCU,CAAmBhD,EAAKc,UAyChDV,EAAAC,EAAAC,cAAA,QAAM2C,SAlCE,SAAAC,GACZA,EAAMC,iBACN,IAAMC,EAAa,CACf7C,QAASqB,EACTyB,MAAM,IAAIC,MAAOC,cACjBpD,UAAWqD,KAAKC,SAAW,IAI/BtB,EAAmBiB,GAGlBhB,KAAK,SAAAC,GAEFZ,EAASD,EAAMR,OAAOqB,EAASC,OAC/BT,EAAW,QAoBPzB,EAAAC,EAAAC,cAAA,SACIoD,MAAO9B,EACP+B,SAzCS,SAAAT,GACpBU,QAAQC,IAAIX,EAAMY,OAAOJ,OACzB7B,EAAWqB,EAAMY,OAAOJ,UAyCjBtD,EAAAC,EAAAC,cAAA,UAAQyD,KAAK,UAAb,WCzEhBC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.44ffb73e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Note = ({note, toggleImportance}) => {\n    // console.log(note)\n    const label = note.important ? 'make not important' : 'make important'\n    return(\n        <div>    \n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </div>    \n    )\n}\n\n\nexport default Note","import axios from 'axios';\n// const baseUrl = 'http://fullstackopen-vsparrow.c9users.io:8081/notes';\n// const baseUrl = 'https://infinite-basin-47509.herokuapp.com/notes/';\nconst baseUrl = '/notes'; //this is when we * build * the react app and place it in the backend's folder\n\nconst getAll = () => axios.get(baseUrl);\n\nconst create = newObject => axios.post(baseUrl, newObject);\n\nconst update = (id, newObject) => axios.put(`${baseUrl}/${id}`, newObject);\n\nexport default { getAll, create, update };","import React, {useState, useEffect} from 'react';\n// import axios from 'axios'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst App = (props) => {\n    // const jsonserverUrl = 'http://fullstackopen-vsparrow.c9users.io:8081/notes'\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    \n    const hook = ()=>{\n        // console.log('effect')\n        // axios\n        //     .get(jsonserverUrl)\n            // .get('http://fullstackopen-vsparrow.c9users.io:8081/notes')\n        noteService.getAll()\n            .then( response => {\n                // console.log('promise fulfilled')\n                setNotes(response.data)\n            })\n    }\n    useEffect(hook, [])\n    //if 2nd parameter of useEffect is empty array\n    //the effect is only run along with the first render of component\n    \n    // console.log('render',notes.length,'notes')\n    const toggleImportanceOf = id => {\n        // console.log('importance of ' + id + ' needs to be toggled')\n        // const url = jsonserverUrl + '/' + id\n        // console.log(url)        \n        const note = notes.find(n=>n.id === id)\n        const changedNote = {...note, important: !note.important}\n        \n        // axios.put(url, changedNote)\n        noteService.update(id,changedNote)\n        .then(response => {\n            setNotes(notes.map(note => note.id !== id ? note : response.data))\n        })\n        \n    } //end toggleImportanceOf\n    const notesToShow = showAll ? notes : notes.filter(note => note.important)\n    const rows = ()=> notesToShow.map(note => \n        <Note \n            key={note.id} \n            note={note}\n            toggleImportance = {()=>toggleImportanceOf(note.id)}\n        />\n    )\n    const handleNoteChange = event => {\n         console.log(event.target.value)\n         setNewNote(event.target.value)\n    }\n    const addNote = event => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() > 0.5,\n            // id: notes.length + 1,               \n        }\n        \n        noteService.create(noteObject)\n        // axios\n        // .post(jsonserverUrl,noteObject)\n        .then(response => {\n            // console.log(response)\n            setNotes(notes.concat(response.data))\n            setNewNote('')\n        })\n        \n        //OLD\n        // setNotes(notes.concat(noteObject))\n        // setNewNote('')\n    }\n    \n    return (\n        <div>    \n            <h1>Notes</h1>\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>\n                {rows()}\n            </ul>\n            <form onSubmit={addNote}>\n                <input\n                    value={newNote} \n                    onChange={handleNoteChange}\n                />\n                <button type=\"submit\">save</button>\n            </form>\n        </div>    \n    )\n}\n\n\nexport default App\n\n// axios\n// .get('http://fullstackopen-vsparrow.c9users.io:8081/notes')\n// .then(response =>{\n//     const notes = response.data\n//     // console.log(notes)\n//     ReactDOM.render(<App notes={notes}/>, document.getElementById('root'));\n// })","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import axios from 'axios'\nimport App from './App'\n\n// const App = (props) => {\n//     console.log(\"props is \",props)\n//     const allnotes = props.notes.map(note=>\n//         <li >{note.content}</li>\n//     )\n//     return (\n//         <div>    \n//             Hi\n//             {allnotes}\n//         </div>    \n//     )\n// }\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// axios\n// .get('http://fullstackopen-vsparrow.c9users.io:8081/notes')\n// .then(response =>{\n//     const notes = response.data\n//     // console.log(notes)\n//     ReactDOM.render(<App notes={notes}/>, document.getElementById('root'));\n// })\n// const promise = axios.get('http://fullstackopen-vsparrow.c9users.io:8081/notes')\n// // const promise = axios.get('http://localhost:8080/notes')\n// // console.log(promise)\n// promise.then(res =>{\n//     console.log(res)\n// })\n\n// const promise2 = axios.get('http://fullstackopen-vsparrow.c9users.io:8081/foobar')\n// // console.log(promise2)\n// promise2.then(res =>{\n//     console.log(res)\n// })"],"sourceRoot":""}